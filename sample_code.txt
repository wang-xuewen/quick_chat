
// quick_chat_s
use tokio::io::{AsyncBufReadExt, AsyncWriteExt, BufReader};
use tokio::net::TcpListener;
use tokio::sync::broadcast;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let listener = TcpListener::bind("127.0.0.1:8080").await?;
    let (tx, _rx) = broadcast::channel(10);

    loop {
        let (socket, _) = listener.accept().await?;
        let tx = tx.clone();
        let mut rx = tx.subscribe();

        tokio::spawn(async move {
            let (reader, mut writer) = socket.into_split();
            let mut reader = BufReader::new(reader);
            let mut line = String::new();

            loop {
                tokio::select! {
                    result = reader.read_line(&mut line) => {
                        if result.unwrap() == 0 {
                            break;
                        }
                        tx.send(line.clone()).unwrap();
                        line.clear();
                    }
                    result = rx.recv() => {
                        let msg = result.unwrap();
                        writer.write_all(msg.as_bytes()).await.unwrap();
                    }
                }
            }
        });
    }
}


// quick_chat_c
use tokio::io::{self, AsyncBufReadExt, AsyncWriteExt, BufReader};
use tokio::net::TcpStream;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let stream = TcpStream::connect("127.0.0.1:8080").await?;
    let (reader, mut writer) = stream.into_split();

    let mut stdin_reader = BufReader::new(io::stdin()).lines();
    let mut server_reader = BufReader::new(reader).lines();

    loop {
        tokio::select! {
            Ok(line) = stdin_reader.next_line() => {
                if let Some(line) = line {
                    writer.write_all(line.as_bytes()).await?;
                    writer.write_all(b"\n").await?;
                }
            }
            Ok(line) = server_reader.next_line() => {
                if let Some(line) = line {
                    println!("Server: {}", line);
                }
            }
        }
    }
}

// 异步通信封装到对象的函数
use tokio::net::TcpListener;
use tokio::io::{self, AsyncReadExt, AsyncWriteExt};
use tokio::sync::broadcast;
use tokio::bufreader::BufReader;
use anyhow::{Result, Context};
use std::sync::Arc;
use tokio::sync::Mutex;

struct TcpServer {
    listener: TcpListener,
    tx: Arc<Mutex<broadcast::Sender<String>>>,
}

impl TcpServer {
    // 创建一个新的 TcpServer 实例
    pub async fn new(address: &str) -> Result<Self> {
        let listener = TcpListener::bind(address)
            .await
            .context("Failed to bind TCP listener")?;
        let (tx, _) = broadcast::channel(10);
        Ok(TcpServer {
            listener,
            tx: Arc::new(Mutex::new(tx)),
        })
    }

    // 启动服务器并开始接收客户端连接
    pub async fn start(&self) -> Result<()> {
        loop {
            let (socket, _) = self.listener.accept().await?;
            let tx = self.tx.clone(); // 克隆发送端

            // 启动一个新的异步任务来处理每个连接
            tokio::spawn(async move {
                if let Err(e) = handle_client(socket, tx).await {
                    eprintln!("Client handler failed: {}", e);
                }
            });
        }
    }
}

async fn handle_client(socket: tokio::net::TcpStream, tx: Arc<Mutex<broadcast::Sender<String>>>) -> Result<()> {
    let (reader, mut writer) = socket.into_split();
    let mut reader = BufReader::new(reader);
    let mut line = String::new();

    let mut rx = tx.lock().await.subscribe(); // 订阅广播

    loop {
        tokio::select! {
            result = reader.read_line(&mut line) => {
                if result.unwrap() == 0 {
                    break; // 客户端关闭连接
                }

                tx.lock().await.send(line.clone()).unwrap(); // 发送消息到广播通道
                line.clear(); // 清空行缓存
            }
            result = rx.recv() => {
                let msg = result.unwrap();
                writer.write_all(msg.as_bytes()).await.unwrap(); // 将接收到的消息写回客户端
            }
        }
    }

    Ok(())
}

#[tokio::main]
async fn main() -> Result<()> {
    let server = TcpServer::new("127.0.0.1:8080").await?;
    server.start().await?;

    Ok(())
}




// 全局变量读写
use std::sync::{Mutex, OnceCell};
struct Config {
    app_name: String,
    max_connections: u32,
}
// 定义一个线程安全的全局静态变量
static GLOBAL_CONFIG: OnceCell<Mutex<Config>> = OnceCell::new();
fn initialize_config() {
    let config = Config {
        app_name: "MyApp".to_string(),
        max_connections: 100,
    };
    GLOBAL_CONFIG
        .set(Mutex::new(config))
        .expect("Config already initialized");
}
fn update_config(new_name: &str, new_max_connections: u32) {
    if let Some(config) = GLOBAL_CONFIG.get() {
        let mut config = config.lock().unwrap(); // 加锁以修改
        config.app_name = new_name.to_string();
        config.max_connections = new_max_connections;
    } else {
        panic!("Global config is not initialized");
    }
}
fn get_config() -> Option<Config> {
    GLOBAL_CONFIG.get().map(|config| {
        let config = config.lock().unwrap(); // 加锁以读取
        Config {
            app_name: config.app_name.clone(),
            max_connections: config.max_connections,
        }
    })
}
fn main() {
    // 初始化全局变量
    initialize_config();
    // 修改全局变量
    update_config("NewAppName", 200);
    // 读取全局变量
    if let Some(config) = get_config() {
        println!("App Name: {}", config.app_name);
        println!("Max Connections: {}", config.max_connections);
    }
}


// tls证书和密钥
use tokio_rustls::TlsAcceptor;
use tokio::net::TcpListener;
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let listener = TcpListener::bind("127.0.0.1:12345").await?;
    let tls_acceptor = TlsAcceptor::from( /* 配置你的TLS证书和密钥 */ );

    loop {
        let (stream, addr) = listener.accept().await?;
        let tls_stream = tls_acceptor.accept(stream).await?;
        // 在此处理加密后的流数据
    }
}
